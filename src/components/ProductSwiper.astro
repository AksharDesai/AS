---
import { fetchProducts } from "../lib/fetchProducts";

// Fetch products dynamically from your Supabase DB
const fetchedProducts = await fetchProducts();
const products = fetchedProducts?.length ? fetchedProducts : [];
---

<body>

  <div class="swiper-container">
    <!-- Cards (slides) -->
     {products.map((product)=>(

         <div class="card overflow-hidden border-2 border-red-500   "><img class="w-full h-full" src={`${product.image}`} draggable="false" loading="lazy" decoding="async" alt="" srcset=""></div>
     ))}
  
  </div>

  <script is:inline>
    const container = document.querySelector('.swiper-container');
    const cards = container.querySelectorAll('.card');

    function animateCardAway(card) {
      const viewportWidth = window.innerWidth;
      const direction = Math.random() > 0.5 ? 1 : -1; // 1 for right, -1 for left
      const translateX = viewportWidth * direction; // Move card off-screen
      const randomRotation = (Math.random() - 0.5) * 360; // Optional: Add some rotation

      card.style.transition = 'transform 0.5s ease-out, opacity 0.5s ease-out';
      card.style.transform = `translate(${translateX}px, 0px) rotate(${randomRotation}deg)`; //Animate only horizontally
      card.style.opacity = 0;

      setTimeout(() => {
        card.remove(); // Remove the card from the DOM
        if (container.children.length === 0) {
          console.log("No more cards!");
          // Optional:  Handle empty state
        }
      }, 500); // Match transition duration
    }

    cards.forEach(card => {
      card.addEventListener('click', (e) => {
        e.preventDefault();
        animateCardAway(card);
      });
    });
  </script>

<style>
    /* Container styling */

    
    .swiper-container {
      position: relative;
      width: 340px;
      height: 420px;
      perspective: 1000px; /* For 3D effect */
    }
    
    /* Card styling */
    .card {
      position: absolute;
      width: 100%;
      height: 100%;
      border-radius: 18px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #fff;
      font-size: 22px;
      font-weight: bold;
      user-select: none;
      transition: transform 0.3s ease;
      cursor: pointer; /* Changed from grab to pointer */
    }
    
    /* Give each card a distinct background color */
    .card:nth-child(1) { background-color: rgb(206, 17, 17); }
    .card:nth-child(2) { background-color: rgb(0, 140, 255); }
    .card:nth-child(3) { background-color: rgb(10, 184, 111); }
    .card:nth-child(4) { background-color: rgb(211, 122, 7); }
    .card:nth-child(5) { background-color: rgb(118, 163, 12); }
    .card:nth-child(6) { background-color: rgb(180, 10, 47); }
    .card:nth-child(7) { background-color: rgb(35, 99, 19); }
    .card:nth-child(8) { background-color: rgb(0, 68, 255); }
    .card:nth-child(9) { background-color: rgb(218, 12, 218); }
    
    /* Add a subtle shadow to cards that arenâ€™t on top */
    .card:not(:last-child) {
      box-shadow: 0 4px 10px rgba(0,0,0,0.2);
    }
  </style>