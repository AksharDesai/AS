---
import { fetchProducts } from "../lib/fetchProducts";

// Fetch products dynamically from your Supabase DB
const fetchedProducts = await fetchProducts();
const products = fetchedProducts?.length ? fetchedProducts : [];
---


<body>

  <div class="swiper-container">
    <!-- Cards (slides) -->
     {products.map((product)=>(

         <div class="card overflow-hidden border-2 border-red-500   "><img class="w-full h-full" src={`${product.image}`} draggable="false" loading="lazy" decoding="async" alt="" srcset=""></div>
     ))}
  
  </div>

  <script is:inline>
    // Variables to track gesture state
    let isDragging = false,
        startX = 0,
        startY = 0,
        currentX = 0,
        currentY = 0,
        currentCard = null,
        threshold = 100; // pixels needed to consider swipe as valid

    // Get the container and list of cards
    const container = document.querySelector('.swiper-container');

    // Function to get the top card (last in the DOM order)
    function getTopCard() {
      const cards = container.querySelectorAll('.card');
      return cards[cards.length - 1];
    }

    // Start dragging (mouse & touch)
    function dragStart(e) {
      currentCard = getTopCard();
      if (!currentCard) return;
      
      isDragging = true;
      currentCard.style.transition = 'none';
      
      // Determine starting coordinates
      startX = e.type.includes('mouse') ? e.clientX : e.touches[0].clientX;
      startY = e.type.includes('mouse') ? e.clientY : e.touches[0].clientY;
    }

    // Drag move event
    function dragMove(e) {
      if (!isDragging || !currentCard) return;
      
      // Get current position
      currentX = e.type.includes('mouse') ? e.clientX : e.touches[0].clientX;
      currentY = e.type.includes('mouse') ? e.clientY : e.touches[0].clientY;
      
      // Calculate distance moved
      const deltaX = currentX - startX;
      const deltaY = currentY - startY;
      
      // Calculate rotation angle (in degrees) relative to movement
      const rotate = deltaX / 10; // adjust divisor to control rotation
      
      // Apply translation and rotation
      currentCard.style.transform = `translate(${deltaX}px, ${deltaY}px) rotate(${rotate}deg)`;
    }

    // End dragging: decide if the card should be swiped away or snap back
    function dragEnd() {
      if (!isDragging || !currentCard) return;
      
      isDragging = false;
      const deltaX = currentX - startX;
      
      // If dragged beyond threshold, animate card out
      if (Math.abs(deltaX) > threshold) {
        const direction = deltaX > 0 ? 1 : -1;
        // Animate off the screen horizontally (and a bit vertically)
        currentCard.style.transition = 'transform 0.5s ease-out';
        currentCard.style.transform = `translate(${direction * container.clientWidth}px, ${currentY - startY}px) rotate(${direction * 45}deg)`;
        
        // After the animation, reset the card and reinsert it to the bottom of the stack.
        setTimeout(() => {
          // Reset styles so the card appears in its original position
          currentCard.style.transition = 'none';
          currentCard.style.transform = 'translate(0px, 0px) rotate(0deg)';
          
          // Move the swiped card to the bottom of the deck (as the first child)
          container.insertBefore(currentCard, container.firstChild);
        }, 500);
      } else {
        // Snap back if not swiped far enough
        currentCard.style.transition = 'transform 0.3s ease-out';
        currentCard.style.transform = 'translate(0px, 0px) rotate(0deg)';
      }
    }

    // Add event listeners for both mouse and touch events
    container.addEventListener('mousedown', dragStart);
    container.addEventListener('touchstart', dragStart);

    container.addEventListener('mousemove', dragMove);
    container.addEventListener('touchmove', dragMove);

    container.addEventListener('mouseup', dragEnd);
    container.addEventListener('touchend', dragEnd);

    // Optional: handle mouse leaving the container while dragging
    container.addEventListener('mouseleave', () => {
      if (isDragging) dragEnd();
    });
  </script>

<style>
    /* Container styling */

    
    .swiper-container {
      position: relative;
      width: 340px;
      height: 420px;
      perspective: 1000px; /* For 3D effect */
    }
    
    /* Card styling */
    .card {
      position: absolute;
      width: 100%;
      height: 100%;
      border-radius: 18px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #fff;
      font-size: 22px;
      font-weight: bold;
      user-select: none;
      transition: transform 0.3s ease;
      cursor: grab;
    }
    
    /* Give each card a distinct background color */
    .card:nth-child(1) { background-color: rgb(206, 17, 17); }
    .card:nth-child(2) { background-color: rgb(0, 140, 255); }
    .card:nth-child(3) { background-color: rgb(10, 184, 111); }
    .card:nth-child(4) { background-color: rgb(211, 122, 7); }
    .card:nth-child(5) { background-color: rgb(118, 163, 12); }
    .card:nth-child(6) { background-color: rgb(180, 10, 47); }
    .card:nth-child(7) { background-color: rgb(35, 99, 19); }
    .card:nth-child(8) { background-color: rgb(0, 68, 255); }
    .card:nth-child(9) { background-color: rgb(218, 12, 218); }
    
    /* Add a subtle shadow to cards that arenâ€™t on top */
    .card:not(:last-child) {
      box-shadow: 0 4px 10px rgba(0,0,0,0.2);
    }
  </style>

