---
import { fetchProducts } from "../lib/fetchProducts";

// Fetch products dynamically from your Supabase DB
const fetchedProducts = await fetchProducts();
const products = fetchedProducts?.length ? fetchedProducts : [];
---

<style>
  /* Container styling */
  .swiper-container {
    position: relative;
    width: 340px;
    height: 420px;
    perspective: 1000px; /* For 3D effect */
    margin: 0 auto;
  }

  img {
    width: 100% !important;
    height: 100% !important;
    object-fit: fill !important;
    object-position: center !important;
  }

  /* Card styling */
  .card {
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 18px;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #fff;
    font-size: 22px;
    font-weight: bold;
    user-select: none;
    cursor: pointer;
    transition: transform 0.3s ease-out, opacity 0.3s ease-out;
  }

  /* Inactive card style */
  .card.inactive {
    opacity: 1;
  }

  /* Shadow for cards behind the active one */
  .card:not(:last-child) {
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
  }

  /* Navigation buttons styling */
  .nav-buttons {
    display: flex;
    justify-content: center;
    margin-top: 20px;
    gap: 10px;
  }
</style>

<div class="swiper-container">
  {
    products.map((product, index) => (
      <div class="card overflow-hidden border-4 border-neutral-700" >
        <img
          src={`${product.image}`}
          draggable="false"
          loading="lazy"
          decoding="async"
          alt={`${product.name}`}
        />
      </div>
    ))
  }
</div>

<div class="nav-buttons rounded-md overflow-hidden">
  <button id="prev-btn" class="bg-black text-white py-2 px-4 text-xl">&lt;</button>
  <button id="next-btn" class="bg-red-500 text-white px-4 py-2 border-white text-xl">&gt;</button>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    // Grab essential DOM elements
    const container = document.querySelector('.swiper-container');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    if (!container || !prevBtn || !nextBtn) {
      console.error('Essential DOM elements for slider are missing.');
      return;
    }
    
    const cards = Array.from(container.querySelectorAll('.card'));
    if (!cards.length) {
      console.error('No cards found in the slider.');
      return;
    }
    
    // Current index represents the active card (top of the stack)
    let currentIndex = cards.length - 1;
    let isAnimating = false; // Prevent rapid clicks that may break animations

    // Initialize positions and classes for each card
    const initCards = () => {
      cards.forEach((card, index) => {
        if (index === currentIndex) {
          card.style.transform = 'none';
          card.style.opacity = '1';
          card.classList.remove('inactive');
        } else {
          card.style.transform = 'translate3d(0, 0, -400px)';
          card.style.opacity = '1';
          card.classList.add('inactive');
        }
      });
    };

    initCards();

    // Handler for moving to the next card (animate current card out)
    const nextCard = () => {
      if (isAnimating || currentIndex === 0) return;
      isAnimating = true;
      const currentCard = cards[currentIndex];
      currentCard.style.transform = 'translate3d(100%, 0, 0)';
      currentCard.style.opacity = '0';
      currentCard.classList.add('inactive');

      // Listen for the end of the transform transition
      const onTransitionEnd = (event) => {
        if (event.propertyName !== 'transform') return;
        currentCard.removeEventListener('transitionend', onTransitionEnd);
        currentIndex--;
        const newCurrent = cards[currentIndex];
        newCurrent.style.transform = 'none';
        newCurrent.style.opacity = '1';
        newCurrent.classList.remove('inactive');
        isAnimating = false;
      };
      currentCard.addEventListener('transitionend', onTransitionEnd);
    };

    // Handler for moving to the previous card (animate previous card in)
    const prevCard = () => {
      if (isAnimating || currentIndex === cards.length - 1) return;
      isAnimating = true;
      const previousCard = cards[currentIndex + 1];
      // Set initial state off-screen to the left
      previousCard.style.transform = 'translate3d(-100%, 0, 0)';
      previousCard.style.opacity = '0';
      // Force reflow to ensure the starting state is applied
      previousCard.getBoundingClientRect();
      // Transition to the active state
      previousCard.style.transform = 'none';
      previousCard.style.opacity = '1';
      previousCard.classList.remove('inactive');

      const onTransitionEnd = (event) => {
        if (event.propertyName !== 'transform') return;
        previousCard.removeEventListener('transitionend', onTransitionEnd);
        currentIndex++;
        isAnimating = false;
      };
      previousCard.addEventListener('transitionend', onTransitionEnd);
    };

    // Bind navigation button events
    nextBtn.addEventListener('click', nextCard);
    prevBtn.addEventListener('click', prevCard);
  });
</script>
