---
import { fetchProducts } from "../lib/fetchProducts";

// Fetch products dynamically from your Supabase DB
const fetchedProducts = await fetchProducts();
const products = fetchedProducts?.length ? fetchedProducts : [];
---

    
    
    <style>
      /* Container styling */
      .swiper-container {
        position: relative;
        width: 340px;
        height: 420px;
        perspective: 1000px; /* For 3D effect */
      }


      /* Card styling */
      .card {
        position: absolute;
        width: 100%;
        height: 100%;
        border-radius: 18px;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #fff;
        font-size: 22px;
        font-weight: bold;
        user-select: none;
        cursor: pointer;
        /* Set transition for transform and opacity so that animations are smooth */
        transition: transform 0.3s ease-out, opacity 0.3s ease-out;
      }

      /* Distinct background colors (fallback or when images donâ€™t cover the full card) */
     

      /* Add a subtle shadow to all cards except the top one */
      .card:not(:last-child) {
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
      }
    </style>
  
    <div class="swiper-container">
      <!-- Render each product card -->
      {products.map((product) => (
        <div class="card overflow-hidden border-4 border-neutral-700">
          <img
            class="w-full h-full"
            src={`${product.image}`}
            draggable="false"
            loading="lazy"
            decoding="async"
            alt=""
            srcset=""
          />
          <span class="hidden" id="product-name">{product.name}</span>
          <span class="hidden" id="product-price">{product.price}</span>
          <span class="hidden" id="product-description">{product.description}</span>
          <span class="hidden" id="product-category">{product.category}</span>
          
        </div>
      
      ))}

      
    </div>

    <script is:inline>
      // Select the container element
      const container = document.querySelector('.swiper-container');

      // Initialize card transforms:
      // All cards except the top (last child) start with a transform that mimics the "prev" effect (translated back in Z).
      const initCards = () => {
        const cards = container.querySelectorAll('.card');
        cards.forEach((card) => {
          if (card !== container.lastElementChild) {
            card.style.transform = 'translate3d(0, 0, -400px)';
          } else {
            card.style.transform = 'none';
          }
          card.style.opacity = 1;
        });
      };

      initCards();

      // Function to animate the top card away (mimicking the "next" effect: translate to the right)
      function animateTopCard() {
        const topCard = container.lastElementChild;
        if (!topCard) return;

        // Animate the top card: translate it 100% to the right
        topCard.style.transform = 'translate3d(100%, 0, 0)';
        topCard.style.opacity = 0;

        // After the transition duration, remove the card and animate the new top card coming forward
        setTimeout(() => {
          topCard.remove();
          const newTop = container.lastElementChild;
          if (newTop) {
            // Force reflow to ensure the transition is applied
            newTop.getBoundingClientRect();
            // Animate the new top card from the "prev" state (translateZ(-400px)) to its natural position (none)
            newTop.style.transform = 'none';
          } else {
            console.log("No more cards!");
          }
        }, 500); // Transition duration matches the CSS transition
      }

      // Listen for click events on the container.
      // Only the top (last) card should react to clicks.
      container.addEventListener('click', (e) => {
        // If the clicked card is the top card, animate it away
        if (e.target.closest('.card') === container.lastElementChild) {
          animateTopCard();
        }
      });
    </script>

