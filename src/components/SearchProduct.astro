---
import { fetchProducts } from "../lib/fetchProducts";


const fetchedProducts = await fetchProducts();
const products = fetchedProducts?.length ? fetchedProducts : [];


---


<button id="searchTrigger"
class="bg-red-600 text-white p-3 rounded-l-lg shadow-lg hover:bg-red-700 transition-colors">
<i class="fas fa-search text-xl"></i>
</button>

<div id="searchOverlay" class="hidden fixed top-0 left-0 w-full  z-50 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4 animate-fade-in">
    <div class="">
      <!-- Option 1: Top Left -->
      <button 
        id="closeSearch" 
        type="button" 
        class="absolute top-8 left-[40%] text-red-500  transition-colors hidden md:block"
      >

        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
  
      <form id="searchForm" class="relative w-full">
        <div class="relative">
          <!-- Mobile Close Button (Top Right) -->
          <button 
            id="closeSearchMobile" 
            type="button" 
            class="absolute  top-4 -left-10 text-red-500 transition-colors md:hidden"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
  
          <input 
            type="text" 
            id="searchInput" 
            name="product_searched"
            class="w-full px-6 py-4 text-lg text-white bg-neutral-900 border-2 border-neutral-700 rounded-full  focus:ring-2  ring-red-500   transition-all duration-300 pr-16 "
            placeholder="Search products..."
            autocomplete="off"
          />

          
          <div class="absolute inset-y-0 right-0 flex items-center pr-4">
            <button 
              type="submit" 
              class="text-neutral-400 hover:text-red-500 transition-colors"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </button>
          </div>
        </div>
  

      </form>
    </div>
  </div>

<script is:inline>
  const searchTriggerBtn = document.getElementById('searchTrigger')
  const searchPanel = document.getElementById('searchOverlay')
  const closePanel = document.getElementById('closeSearch')
  const closePanelMobile = document.getElementById('closeSearchMobile')

  // get form elements through id
  const searchForm = document.getElementById('searchForm')
  const input = document.getElementById('searchInput')

  const resultsContainer = document.getElementById('product-container')
  const searchContainer = document.getElementById('search-container')

  searchTriggerBtn.addEventListener('click',function(e){
      searchPanel.classList.remove('hidden')
     
  })    

  closePanel.addEventListener('click',function(e){
      searchPanel.classList.add('hidden')
      
  })

  closePanelMobile.addEventListener('click',function(e){
      searchPanel.classList.add('hidden')
      document.body.classList.remove('overflow-hidden')
  })

  searchForm.addEventListener('input',function(e){
    e.preventDefault()
    const searchTerm = input.value;

    const normalizedSearch = searchTerm.toLowerCase().replace(/[^a-z0-9]/g, '');

    console.log(normalizedSearch);

    if (normalizedSearch === '' || !normalizedSearch) {
      searchContainer.classList.add('hidden');
      resultsContainer.classList.remove('hidden');
      console.log('results container shown');
      return;
    } else {
      const matchingProducts = resultsContainer.querySelectorAll(`.product-item[class*="${normalizedSearch}"]`);
      
      console.log(matchingProducts);
      
      if (matchingProducts.length > 0) {
        // Clone matching products instead of moving them
        const clonedProducts = Array.from(matchingProducts).map(product => product.cloneNode(true));
        
        resultsContainer.classList.add('hidden');
        searchContainer.innerHTML = '';
        
        clonedProducts.forEach(product => {
          searchContainer.appendChild(product);
        });
        
        searchContainer.classList.remove('hidden');
        console.log('Cloned products added to search results');
      } else {
        console.log('No products found of that name');
      }
    }
  })
</script>

<style>
input:focus {
  outline: 2px solid rgb(244, 62, 62); /* red-500 */
  
  box-shadow: none;
  -webkit-appearance: none;
}

input {
  -webkit-tap-highlight-color: transparent;
}
</style>

