---
import { fetchProducts } from "../lib/fetchProducts";



const fetchedProducts = await fetchProducts();
const products = fetchedProducts?.length ? fetchedProducts : [];
---

<button
  id="searchTrigger"
  class="search-trigger bg-red-600 text-white p-3 rounded-l-lg shadow-lg hover:bg-red-700 transition-colors"
>
  <i class="fas fa-search text-xl"></i>
</button>


<div
  id="searchOverlay"
  class="hidden fixed top-0 left-0 w-full z-50 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4 animate-fade-in"
>
  <div class="">
    <!-- Option 1: Top Left -->

    <form id="searchForm" class="relative w-full">
      <div class="relative">
        <!-- Mobile Close Button (Top Right) -->

        <input
          type="text"
          id="searchInput"
          name="product_searched"
          class="w-full px-6 py-4 text-lg text-white bg-neutral-900 border-2 border-neutral-700 rounded-full focus:ring-2 ring-red-500 transition-all duration-300 pr-16"
          placeholder="Search products..."
          autocomplete="off"
        />

        <div class="absolute inset-y-0 right-0 flex items-center pr-4">
          <button
            id="closeSearch"
            type="button"
            class="text-red-500 transition-colors"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-8 w-8"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      </div>
    </form>
  </div>
</div>

<script is:inline>
  const searchTriggerBtn = document.getElementById("searchTrigger");
  const searchPanel = document.getElementById("searchOverlay");
  const closePanel = document.getElementById("closeSearch");

  // get form elements through id
  const searchForm = document.getElementById("searchForm");
  const input = document.getElementById("searchInput");

  const resultsContainer = document.getElementById("product-container");
  const searchContainer = document.getElementById("search-container");

  searchTriggerBtn.addEventListener("click", function (e) {
    searchPanel.classList.remove("hidden");
  });

  closePanel.addEventListener("click", function (e) {
    searchPanel.classList.add("hidden");
    
  });

  searchForm.addEventListener("input", function (e) {
    e.preventDefault();
    const searchTerm = input.value;

    const normalizedSearch = searchTerm.toLowerCase().replace(/[^a-z0-9]/g, "");

    

    if (normalizedSearch === "" || !normalizedSearch) {
      searchContainer.classList.add("hidden");
      resultsContainer.classList.remove("hidden");
    
      return;
    } else {
      const matchingProducts = resultsContainer.querySelectorAll(
        `.product-item[class*="${normalizedSearch}"]`
      );

      

      if (matchingProducts.length > 0) {
        // Clone matching products instead of moving them
        const clonedProducts = Array.from(matchingProducts).map((product) =>
          product.cloneNode(true)
        );

        resultsContainer.classList.add("hidden");
        searchContainer.innerHTML = "";

        clonedProducts.forEach((product) => {
          searchContainer.appendChild(product);
        });

        searchContainer.classList.remove("hidden");
        console.log("Cloned products added to search results");
      } else {
        console.log("No products found of that name");
      }
    }
  });
</script>

<style>
  input:focus {
    outline: 2px solid rgb(244, 62, 62); /* red-500 */

    box-shadow: none;
    -webkit-appearance: none;
  }

  input {
    -webkit-tap-highlight-color: transparent;
  }
</style>
