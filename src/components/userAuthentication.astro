---
import OtpVerification from "./otpVerification.astro";

import { fetchPhoneNumbers } from "../lib/fetchPhoneNumbers"; // Removed as Supabase is no longer used
const phoneNumbersArray = await fetchPhoneNumbers();
---

<div class="hidden" id="phoneNumbersArray">
  {
    btoa(
      JSON.stringify(phoneNumbersArray.map((num) => num.phoneNumber).join(","))
    )
  }
</div>

<!-- Login Modal -->
<div
  id="Login_modal"
  class="fixed inset-0 bg-[rgba(0,0,0,0.8)] flex items-center justify-center z-50 transition-opacity duration-500 opacity-0 hidden"
>
  <div
    class="bg-[#2F2F2F] rounded-xl p-8 relative w-[300px] transform scale-95 transition-transform duration-500"
  >
    <button
      id="closeloginBtn"
      class="absolute top-3 right-3 text-white text-2xl hover:text-gray-300 transition-colors"
    >
      &times;
    </button>

    <h2 class="text-white text-2xl mb-6 font-semibold">Login with Phone</h2>

    <form id="loginForm">
      <div class="mb-6">
        <label class="text-white text-sm mb-2 block">Phone Number</label>
        <input type="hidden" name="user_action" value="through_navbar" />
        <input
          type="tel"
          name="phone_number"
          id="phoneInput"
          maxlength="10"
          placeholder="9876543210"
          class="w-full bg-black text-white px-4 py-3 rounded-lg focus:border-red-500 focus:ring-1 focus:ring-red-500 placeholder-gray-400"
          required
        />
      </div>

      <button
        type="submit"
        id="loginBtn"
        disabled
        class="w-full bg-red-600 text-white py-3 rounded-lg font-medium disabled:bg-red-900 disabled:cursor-not-allowed hover:bg-red-700 transition-colors"
      >
        Send OTP
      </button>
    </form>
  </div>
</div>

<!-- Logout Confirmation Modal -->
<div
  id="Logout_modal"
  class="hidden opacity-0 fixed inset-0 bg-[rgba(0,0,0,0.8)] flex items-center justify-center z-50 transition-opacity duration-500"
>
  <div
    class="bg-[#2F2F2F] rounded-xl p-8 relative w-[300px] transform scale-95 transition-transform duration-500"
  >
    <h2 class="text-white text-2xl mb-6 font-semibold">Confirm Logout</h2>

    <p class="text-white mb-6">Are you sure you want to logout?</p>

    <div class="flex gap-4">
      <button
        id="confirmLogoutBtn"
        class="flex-1 bg-red-600 text-white py-3 rounded-lg font-medium hover:bg-red-700 transition-colors"
      >
        Yes, Logout
      </button>
      <button
        id="cancelLogoutBtn"
        class="flex-1 bg-gray-600 text-white py-3 rounded-lg font-medium hover:bg-gray-700 transition-colors"
      >
        Cancel
      </button>
    </div>
  </div>
</div>

<!-- Include the OTP Verification Component -->
<OtpVerification />

<script type="module">
  // Get the encrypted phone numbers array from the DOM
  const encodedData = document.getElementById("phoneNumbersArray").textContent;

  // 2. Decode the Base64 string
  const decodedJSON = atob(encodedData);

  // 3. Parse the JSON string to get the original comma-separated phone numbers
  const phoneNumbersString = JSON.parse(decodedJSON);

  // 4. Split the string into an array
  const phoneNumbersArray = phoneNumbersString.split(",");

  console.log(phoneNumbersArray);

  // Function to handle opening the Login Modal
  function openLoginModal() {
    const loginModal = document.getElementById("Login_modal");
    const modalContent = loginModal.querySelector("div");

    // Remove 'hidden' to display the modal
    loginModal.classList.remove("hidden");

    // Reset classes for animation
    loginModal.classList.add("opacity-0");
    modalContent.classList.add("scale-95");

    // Force reflow to ensure the browser recognizes the initial state
    void loginModal.offsetWidth;

    // Add classes to trigger the animation
    loginModal.classList.remove("opacity-0");
    modalContent.classList.remove("scale-95");
    modalContent.classList.add("scale-100");

    console.log("Login modal opened with animation.");
  }

  // Function to handle closing the Login Modal
  function closeLoginModal() {
    const loginModal = document.getElementById("Login_modal");
    const modalContent = loginModal.querySelector("div");
    document.body.classList.remove("overflow-hidden");
    // Add classes to trigger the closing animation
    modalContent.classList.remove("scale-100");
    modalContent.classList.add("scale-95");
    loginModal.classList.add("opacity-0");

    // After the transition duration, add 'hidden' to remove the modal from view
    setTimeout(() => {
      loginModal.classList.add("hidden");
      console.log("Login modal closed.");
    }, 500); // Match with transition duration
  }

  // Function to handle opening the Logout Modal
  function openLogoutModal() {
    const logoutModal = document.getElementById("Logout_modal");
    const modalContent = logoutModal.querySelector("div");

    // Remove 'hidden' to display the modal
    logoutModal.classList.remove("hidden");

    // Reset classes for animation
    logoutModal.classList.add("opacity-0");
    modalContent.classList.add("scale-95");

    // Force reflow to ensure the browser recognizes the initial state
    void logoutModal.offsetWidth;

    // Add classes to trigger the animation
    logoutModal.classList.remove("opacity-0");
    modalContent.classList.remove("scale-95");
    modalContent.classList.add("scale-100");

    console.log("Logout modal opened with animation.");
  }

  // Function to handle closing the Logout Modal
  function closeLogoutModal() {
    const logoutModal = document.getElementById("Logout_modal");
    const modalContent = logoutModal.querySelector("div");

    // Add classes to trigger the closing animation
    modalContent.classList.remove("scale-100");
    modalContent.classList.add("scale-95");
    logoutModal.classList.add("opacity-0");

    // After the transition duration, add 'hidden' to remove the modal from view
    setTimeout(() => {
      logoutModal.classList.add("hidden");
      console.log("Logout modal closed.");
    }, 500); // Match with transition duration
  }

  // Open the Login Modal when a trigger element is clicked
  document.querySelectorAll(".openLoginModal").forEach((button) =>
    button.addEventListener("click", function () {
      // Check if user is already logged in
      document.body.classList.add("overflow-hidden");
      const isLoggedIn = localStorage.getItem("isLoggedIn");
      const userPhone = localStorage.getItem("userPhone");

      if (isLoggedIn === "true" && userPhone) {
        // User is already logged in, open Logout Modal
        openLogoutModal();
      } else {
        // Open Login Modal with animation
        openLoginModal();
      }
    })
  );

  // Handle closing the Login Modal when the X button is clicked
  document
    .getElementById("closeloginBtn")
    .addEventListener("click", function () {
      document.body.classList.remove("overflow-hidden");
      closeLoginModal();
    });

  // Handle closing the Logout Modal when 'Cancel' is clicked
  document
    .getElementById("cancelLogoutBtn")
    .addEventListener("click", function () {
      closeLogoutModal();
      document.body.classList.remove("overflow-hidden");
    });

  // Handle confirming logout
  document
    .getElementById("confirmLogoutBtn")
    .addEventListener("click", function () {
      // Update all login text elements back to "Login"
      document.querySelectorAll(".login-text").forEach((button) => {
        button.textContent = "Login";
      });
      console.log("User logged out.");
      localStorage.removeItem("isLoggedIn");
      localStorage.removeItem("userPhone");
      closeLogoutModal();
      document.body.classList.remove("overflow-hidden");
    });

  // Enable/disable the Send OTP button based on valid 10-digit phone input.
  const phoneInput = document.getElementById("phoneInput");
  const loginBtn = document.getElementById("loginBtn");

  phoneInput.addEventListener("input", function () {
    const phoneNumber = this.value;
    const isValid = /^\d{10}$/.test(phoneNumber);
    loginBtn.disabled = !isValid;

    if (phoneNumbersArray.includes(phoneNumber)) {
      loginBtn.textContent = "Welcome Back";
      loginBtn.classList.remove("bg-red-600");
      loginBtn.classList.add(
        "bg-gradient-to-r",
        "from-green-400",
        "to-green-600",
        "shadow-lg",
        "shadow-green-500/50",
        "hover:shadow-green-500/80"
      );
    } else {
      loginBtn.textContent = "Send OTP";
      loginBtn.classList.remove(
        "bg-gradient-to-r",
        "from-green-400",
        "to-green-600",
        "shadow-lg",
        "shadow-green-500/50",
        "hover:shadow-green-500/80"
      );
      loginBtn.classList.add("bg-red-600");
    }
  });

  // Handle the login form submission: simulate OTP sending and animate modals.
  const loginForm = document.getElementById("loginForm");
  loginForm.addEventListener("submit", function (event) {
    event.preventDefault();
    const phoneNumber = phoneInput.value;

    // Check if the phone number already exists
    if (phoneNumbersArray.includes(phoneNumber)) {
      localStorage.setItem("isLoggedIn", "true");
      localStorage.setItem("userPhone", phoneNumber);
      closeLoginModal();
      document.querySelectorAll(".login-text").forEach((button) => {
        button.textContent = phoneNumber;
      });
      console.log(`User with phone number ${phoneNumber} logged in.`);
      return;
    } else {
      // Simulate OTP sending
      console.log(`Simulating OTP send to phone number: ${phoneNumber}`);
      // Store the simulated OTP in a variable for verification
      window.userPhone = phoneNumber;

      // Simulate OTP generation
      const simulatedOTP = "123456";
      console.log(`Simulated OTP: ${simulatedOTP}`);

      // Dispatch an event to open the OTP modal
      window.dispatchEvent(new Event("openOtpModal"));
      console.log("OTP modal opened via event.");
    }
  });

  // Optional: Listen for the OTP modal close event to perform additional actions
  window.addEventListener("otpModalClosed", () => {
    console.log("OTP modal has been closed.");
  });
</script>
