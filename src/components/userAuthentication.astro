---
import OtpVerification from "./otpVerification.astro";
// Removed Supabase imports and related code
// import { fetchPhoneNumbers } from "../lib/fetchPhoneNumbers"; // Removed as Supabase is no longer used

// Frontend-only phone numbers data (placeholder)
const phoneNumbersArray = ["9876543210", "1234567890"]; // Example existing phone numbers
---
<div class="hidden" id="phoneNumbersArray">
  {JSON.stringify(phoneNumbersArray.map((num) => num.split("").join("#@$")))}
</div>

<!-- Login Modal -->
<div
  id="Login_modal"
  class="hidden fixed inset-0 bg-[rgba(0,0,0,0.8)] flex items-center justify-center z-50 transform translate-x-0 transition-transform duration-300"
>
  <div class="bg-[#2F2F2F] rounded-xl p-8 relative w-[300px]">
    <button
      id="closeloginBtn"
      class="absolute top-3 right-3 text-white text-2xl hover:text-gray-300 transition-colors"
    >
      &times;
    </button>

    <h2 class="text-white text-2xl mb-6 font-semibold">Login with Phone</h2>

    <form id="loginForm">
      <div class="mb-6">
        <label class="text-white text-sm mb-2 block">Phone Number</label>
        <input type="hidden" name="user_action" value="through_navbar" />
        <input
          type="tel"
          name="phone_number"
          id="phoneInput"
          maxlength="10"
          placeholder="9876543210"
          class="w-full bg-black text-white px-4 py-3 rounded-lg focus:border-red-500 focus:ring-1 focus:ring-red-500 placeholder-gray-400"
          required
        />
      </div>

      <button
        type="submit"
        id="loginBtn"
        disabled
        class="w-full bg-red-600 text-white py-3 rounded-lg font-medium disabled:bg-red-900 disabled:cursor-not-allowed hover:bg-red-700 transition-colors"
      >
        Send OTP
      </button>
    </form>
  </div>
</div>

<!-- Include the OTP Verification Component -->
<OtpVerification />

<script type="module">

  // Get the encrypted phone numbers array from the DOM
  const encryptedPhoneNumbers = document.getElementById("phoneNumbersArray").textContent;
  
  // Parse the JSON string and decrypt each phone number
  const phoneNumbersArray = JSON.parse(encryptedPhoneNumbers).map(encryptedNum => {
    // Replace the encryption pattern #@$ with empty string to decrypt
    return encryptedNum.split("#@$").join("");
  });

  console.log("Decrypted phone numbers:", phoneNumbersArray);
  



    // Open the Login Modal when a trigger element is clicked.
    document.querySelectorAll(".openLoginModal").forEach((button) =>
      button.addEventListener("click", function () {
        // Check if user is already logged in
        const isLoggedIn = localStorage.getItem("isLoggedIn");
        const userPhone = localStorage.getItem("userPhone");

        if (isLoggedIn === "true" && userPhone) {
          // User is already logged in, log them out
          localStorage.removeItem("isLoggedIn");
          localStorage.removeItem("userPhone");

          // Update all login text elements back to "Login"
          document.querySelectorAll(".login-text").forEach((button) => {
            button.textContent = "Login";
          });
          console.log("User logged out.");
          return;
        } else {
          const loginModal = document.getElementById("Login_modal");
          loginModal.classList.remove("hidden"); // Ensure starting position
          loginModal.classList.remove("-translate-x-full"); // Ensure starting position
          loginModal.classList.add("translate-x-0"); // Slide in
          console.log("Login modal opened.");
        }
      })
    );

    // Enable/disable the Send OTP button based on valid 10-digit phone input.
    const phoneInput = document.getElementById("phoneInput");
    const loginBtn = document.getElementById("loginBtn");

    phoneInput.addEventListener("input", function () {
      const phoneNumber = this.value;
      const isValid = /^\d{10}$/.test(phoneNumber);
      loginBtn.disabled = !isValid;

      if (phoneNumbersArray.includes(phoneNumber)) {
        loginBtn.textContent = "Login";
        loginBtn.classList.remove("bg-red-600");
        loginBtn.classList.add(
          "bg-gradient-to-r",
          "from-green-400",
          "to-green-600",
          "shadow-lg",
          "shadow-green-500/50",
          "hover:shadow-green-500/80"
        );
      } else {
        loginBtn.textContent = "Send OTP";
        loginBtn.classList.remove(
          "bg-gradient-to-r",
          "from-green-400",
          "to-green-600",
          "shadow-lg",
          "shadow-green-500/50",
          "hover:shadow-green-500/80"
        );
        loginBtn.classList.add("bg-red-600");
      }
    });

    // Handle the login form submission: simulate OTP sending and animate modals.
    const loginForm = document.getElementById("loginForm");
    loginForm.addEventListener("submit", function (event) {
      event.preventDefault();
      const phoneNumber = phoneInput.value;

      const phoneNumbersArray="";

      // Check if the phone number already exists
      if (phoneNumbersArray.includes(phoneNumber)) {
        localStorage.setItem("isLoggedIn", "true");
        localStorage.setItem("userPhone", phoneNumber);
        const loginModal = document.getElementById("Login_modal");
        loginModal.classList.add("-translate-x-full"); // Slide out to left

        setTimeout(() => {
          loginModal.classList.add("hidden");
          loginModal.classList.remove("-translate-x-full");
          console.log("User logged in directly.");
        }, 300); // Match with transition duration

        document.querySelectorAll(".login-text").forEach((button) => {
          button.textContent = phoneNumber;
        });

        console.log(`User with phone number ${phoneNumber} logged in.`);
        return;
      } else {
        // Simulate OTP sending
        console.log(`Simulating OTP send to phone number: ${phoneNumber}`);

        // Simulate OTP generation
        const simulatedOTP = "123456";
        console.log(`Simulated OTP: ${simulatedOTP}`);

        // Animate the login modal to slide left (off-screen)
        const loginModal = document.getElementById("Login_modal");
        loginModal.classList.add("-translate-x-full"); // Slide out to left

        // Dispatch an event to open the OTP modal
        setTimeout(() => {
          window.dispatchEvent(new Event("openOtpModal"));
          console.log("OTP modal opened via event.");
        }, 300); // delay should match the CSS transition duration (300ms)

        // Store the simulated OTP in a variable for verification
      
        window.userPhone = phoneNumber;
      }
    });

    // Handle closing the Login Modal when the X button is clicked
    const closeLoginBtn = document.getElementById("closeloginBtn");
    closeLoginBtn.addEventListener("click", function () {
      const loginModal = document.getElementById("Login_modal");
      loginModal.classList.add("-translate-x-full"); // Slide out to left
      loginModal.classList.add("hidden");
      // Match with transition duration
    });

    // Listen for the OTP modal close event to possibly perform additional actions
    window.addEventListener("otpModalClosed", () => {
      // You can add any additional logic here if needed when OTP modal is closed
      console.log("OTP modal has been closed.");
    });
  
</script>
