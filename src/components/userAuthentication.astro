---
import { fetchPhoneNumbers } from "../lib/fetchPhoneNumbers";
import { supabase } from "../lib/supabaseClient";

const fetchedPhone = await fetchPhoneNumbers();
const phoneNumbersObj = fetchedPhone?.length ? fetchedPhone : [];

const phoneNumbersArray = phoneNumbersObj.map((phone) => phone.phoneNumber);

// Get phone number from localStorage if it exists

// GET THE LOCAL STORAGE PHONE NUMBER
---

<h1 id="phoneNumbersData" class="hidden">
  {JSON.stringify(phoneNumbersArray.map((num) => num.split("").join("#@$")))}
</h1>

<!-- Login Modal -->
<div
  id="Login_modal"
  class="hidden fixed inset-0 bg-[rgba(0,0,0,0.8)] flex items-center justify-center z-50 transition-transform duration-300 translate-x-0"
>
  <div class="bg-[#2F2F2F] rounded-xl p-8 relative w-[300px]">
    <button
      id="closeloginBtn"
      class="absolute top-3 right-3 text-white text-2xl hover:text-gray-300 transition-colors"
    >
      &times;
    </button>

    <h2 class="text-white text-2xl mb-6 font-semibold">Login with Phone</h2>

    <form id="loginForm">
      <div class="mb-6">
        <label class="text-white text-sm mb-2 block">Phone Number</label>
        <input type="hidden" name="user_action" value="through_navbar" />
        <input
          type="tel"
          name="phone_number"
          id="phoneInput"
          maxlength="10"
          placeholder="9876543210"
          class="w-full bg-black text-white px-4 py-3 rounded-lg focus:border-red-500 focus:ring-1 focus:ring-red-500 placeholder-gray-400"
          required
        />
      </div>

      <button
        type="submit"
        id="loginBtn"
        disabled
        class="w-full bg-red-600 text-white py-3 rounded-lg font-medium disabled:bg-red-900 disabled:cursor-not-allowed hover:bg-red-700 transition-colors"
      >
        Send OTP
      </button>
    </form>
  </div>
</div>

<!-- OTP Verification Modal -->
<div
  id="otpModal"
  class="fixed inset-0 bg-[rgba(0,0,0,0.8)] flex items-center justify-center z-50 transition-transform duration-300 transform translate-x-full"
>
  <div class="bg-[#2F2F2F] rounded-xl p-8 relative w-[300px]">
    <button
      id="closeOtpBtn"
      class="absolute top-3 right-3 text-white text-2xl hover:text-gray-300 transition-colors"
    >
      &times;
    </button>

    <h2 class="text-white text-2xl mb-6 font-semibold">Verify OTP</h2>

    <form id="otpForm">
      <div class="mb-6">
        <label class="text-white text-sm mb-2 block">OTP Code</label>
        <input
          type="text"
          id="otpInput"
          placeholder="Enter OTP"
          class="w-full bg-black text-white px-4 py-3 rounded-lg focus:border-red-500 focus:ring-1 focus:ring-red-500 placeholder-gray-400"
          required
        />
      </div>

      <button
        type="submit"
        class="w-full bg-red-600 text-white py-3 rounded-lg font-medium hover:bg-red-700 transition-colors"
      >
        Verify OTP
      </button>
    </form>
  </div>
</div>

<script type="module">
  import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";

  // Initialize Supabase client
  const SUPABASE_URL = "https://thknpfkhkurhbnivoloy.supabase.co";
  const SUPABASE_ANON_KEY =
    "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRoa25wZmtoa3VyaGJuaXZvbG95Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg1MzU4NDEsImV4cCI6MjA1NDExMTg0MX0.cU-XRfGMNRolQMKK-Zig4jYU-_oWLG3i7LtxFjTOmek";
  const supabaseClient = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

  // Retrieve the phoneNumbersArray from the hidden div and decode it
  const phoneNumbersData =
    document.getElementById("phoneNumbersData").textContent;
  const phoneNumbersArray = JSON.parse(phoneNumbersData).map((num) =>
    num.split("#@$").join("")
  );

  // Open the Login Modal when a trigger element is clicked.
  document.querySelectorAll(".openLoginModal").forEach((button) =>
    button.addEventListener("click", function () {
      // Check if user is already logged in
      const isLoggedIn = localStorage.getItem("isLoggedIn");
      const userPhone = localStorage.getItem("userPhone");

      if (isLoggedIn === "true" && userPhone) {
        // User is already logged in, no need to show login modal
        // User is logged in, so log them out
        localStorage.removeItem("isLoggedIn");
        localStorage.removeItem("userPhone");

        // Update all login text elements back to "Login"
        document.querySelectorAll(".login-text").forEach((button) => {
          button.textContent = "Login";
        });
        console.log("User logged out.");
        return;
      } else {
        const loginModal = document.getElementById("Login_modal");
        loginModal.classList.remove("hidden");
        console.log("Login modal opened.");
      }
    })
  );

  // Enable/disable the Send OTP button based on valid 10-digit phone input.
  const phoneInput = document.getElementById("phoneInput");
  const loginBtn = document.getElementById("loginBtn");

  phoneInput.addEventListener("input", function () {
    const phoneNumber = this.value;
    const isValid = /^\d{10}$/.test(phoneNumber);
    loginBtn.disabled = !isValid;

    if (phoneNumbersArray.includes(phoneNumber)) {
      loginBtn.textContent = "Login";
      loginBtn.classList.remove("bg-red-600");
      loginBtn.classList.add(
        "bg-gradient-to-r",
        "from-green-400",
        "to-green-600",
        "shadow-lg",
        "shadow-green-500/50",
        "hover:shadow-green-500/80"
      );
    } else {
      loginBtn.textContent = "Send OTP";
      loginBtn.classList.remove(
        "bg-gradient-to-r",
        "from-green-400",
        "to-green-600",
        "shadow-lg",
        "shadow-green-500/50",
        "hover:shadow-green-500/80"
      );
      loginBtn.classList.add("bg-red-600");
    }
  });

  // Handle the login form submission: simulate OTP sending and animate modals.
  const loginForm = document.getElementById("loginForm");
  loginForm.addEventListener(
    "submit",
    async function (event) {
      event.preventDefault();
      const phoneNumber = phoneInput.value;

      // Check if the phone number already exists
      if (phoneNumbersArray.includes(phoneNumber)) {
        localStorage.setItem("isLoggedIn", "true");
        localStorage.setItem("userPhone", phoneNumber);
        const loginModal = document.getElementById("Login_modal");
        loginModal.classList.add("hidden");

        document.querySelectorAll(".login-text").forEach((button) => {
          button.textContent = phoneNumber;
        });

        console.log(`User with phone number ${phoneNumber} logged in.`);
        return;
      } else {
        // Simulate OTP sending
        console.log(`Simulating OTP send to phone number: ${phoneNumber}`);

        // Simulate OTP generation
        const simulatedOTP = "123456";
        console.log(`Simulated OTP: ${simulatedOTP}`);

        // Animate the login modal to slide left (off-screen)
        const loginModal = document.getElementById("Login_modal");
        loginModal.classList.add("-translate-x-full");

        // After the login modal slides out, animate OTP modal in
        setTimeout(() => {
          const otpModal = document.getElementById("otpModal");
          otpModal.classList.remove("translate-x-full");
          console.log("OTP modal opened.");
        }, 300); // delay should match the CSS transition duration (300ms)

        // Store the simulated OTP in a variable for verification
        window.generatedOTP = simulatedOTP;
        window.userPhone = phoneNumber;
      }
    } //else closing here
  );

  // Function to insert phone number into Supabase (optional for frontend-only)
  async function insertPhoneNumber(phoneNumber) {
    const { data, error } = await supabaseClient
      .from("phoneNumbers")
      .insert([{ phoneNumber }]);

    if (error) {
      console.error("Error inserting phone number:", error);
      alert(
        "An error occurred while saving your phone number. Please try again."
      );
    } else {
      console.log("Phone number inserted successfully:", data);
    }
  }

  // Modify the OTP verification part
  const otpForm = document.getElementById("otpForm");
  otpForm.addEventListener("submit", async function (event) {
    event.preventDefault();

    // Retrieve OTP entered by the user
    const enteredOTP = document.getElementById("otpInput").value;

    // Verify OTP
    if (enteredOTP === window.generatedOTP) {
      // Close both modals
      const loginModal = document.getElementById("Login_modal");
      const otpModal = document.getElementById("otpModal");
      loginModal.classList.add("hidden");
      otpModal.classList.add("translate-x-full");

      // Set login state
      const userPhone = window.userPhone;
      localStorage.setItem("isLoggedIn", "true");
      localStorage.setItem("userPhone", userPhone);

      // Optionally, insert the phone number into Supabase
      // await insertPhoneNumber(userPhone);

      // Update UI accordingly
      document.querySelectorAll(".login-text").forEach((button) => {
        button.textContent = userPhone;
      });

      console.log(
        `User with phone number ${userPhone} verified and logged in.`
      );
    } else {
      alert("Invalid OTP. Please try again.");
      console.log("Invalid OTP entered.");
    }
  });

  // Optional: If the user clicks the close button on the OTP modal, slide back to the login modal.
  const closeOtpBtn = document.getElementById("closeOtpBtn");
  closeOtpBtn.addEventListener("click", function () {
    const otpModal = document.getElementById("otpModal");
    otpModal.classList.add("translate-x-full");

    // After OTP modal slides out, bring back the login modal
    setTimeout(() => {
      const loginModal = document.getElementById("Login_modal");
      loginModal.classList.remove("-translate-x-full");
      console.log("Returned to login modal.");
    }, 300);
  });

  // (Optional) Close login modal with its close button.
  const closeLoginBtn = document.getElementById("closeloginBtn");
  closeLoginBtn.addEventListener("click", function () {
    const loginModal = document.getElementById("Login_modal");
    loginModal.classList.add("hidden");
    console.log("Login modal closed.");
  });
</script>
